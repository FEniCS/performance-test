# Copyright (C) 2017-2019 Chris N. Richardson and Garth N. Wells
#
# This file is part of FEniCS-miniapp (https://www.fenicsproject.org)
#
# SPDX-License-Identifier:    MIT

# Elasticity parameters
E = 1.0e6
nu = 0.3
mu = E / (2.0 * (1.0 + nu))
lmbda = E * nu / ((1.0 + nu) * (1.0 - 2.0 * nu))

gl = globals()
forms = []
for degree in range(1, 4):
    element = VectorElement("Lagrange", tetrahedron, degree)

    u, v = TrialFunction(element), TestFunction(element)
    f = Coefficient(element)

    def epsilon(v):
        return 0.5*(grad(v) + grad(v).T)

    def sigma(v):
        return 2.0*mu*epsilon(v) + lmbda*tr(epsilon(v))*Identity(v.geometric_dimension())

    aname = 'a' + str(degree)
    Lname = 'L' + str(degree)
    gl[aname] = inner(sigma(u), epsilon(v))*dx
    gl[Lname] = inner(f, v)*dx

    del u, v, f
    forms += [gl[aname], gl[Lname]]